version: '3'

services:
  rabbitmq1:
    image: rabbitmq:3.12-rc-management
    # container_name: 'iuliaqueue'
    # needs to be specified, see docker compose
    hostname: iuliaqueue
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
      - ../rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ../rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - rabbitminio

  minio1:
    image: quay.io/minio/minio
    command: server --console-address ":9090" /data
    depends_on:
      - rabbitmq1
    ports:
      - 9000:9000
      - 9090:9090
    container_name: minio1

    # Used to identify the container in the policy network in order to
    # initialize the policy
    hostname: minio1

    environment:
      MINIO_ROOT_USER: hello
      MINIO_ROOT_PASSWORD: myfriend
      MINIO_NOTIFY_AMQP_ENABLE_PRIMARY: "on"
      MINIO_NOTIFY_AMQP_URL_PRIMARY: "amqp://guest:guest@iuliaqueue:5672"
      MINIO_NOTIFY_AMQP_EXCHANGE_PRIMARY: "upload"
      MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_PRIMARY: "direct"
      MINIO_NOTIFY_AMQP_ROUTING_KEY_PRIMARY: "upload"
      MINIO_NOTIFY_AMQP_MANDATORY_PRIMARY: "on"
      MINIO_NOTIFY_AMQP_DURABLE_PRIMARY: "on"
      # non-blocking message delivery
      MINIO_NOTIFY_AMQP_NO_WAIT_PRIMARY: "off"
      MINIO_NOTIFY_AMQP_INTERNAL_PRIMARY: "off"
      # automatically deletes messages if there are no consumers
      MINIO_NOTIFY_AMQP_AUTO_DELETED_PRIMARY: "off"
      # 1 - non-persistent queue, 2 - persistent queue
      MINIO_NOTIFY_AMQP_DELIVERY_MODE_PRIMARY: "2"
      # messages that were not delivered to rabbitmq are stored here. minio
      # will resend these messages once rabbitmq is back online.
      MINIO_NOTIFY_AMQP_QUEUE_DIR_PRIMARY: "/mnt/data/undelivered"
      # maximum number of undelivered messages stored by minio
      MINIO_NOTIFY_AMQP_QUEUE_LIMIT_PRIMARY: "1000"
      MINIO_NOTIFY_AMQP_COMMENT_PRIMARY: "let's see if it works"
      MINIO_IDENTITY_PLUGIN_URL: "http://host.docker.internal:8033/api/auth/minio"
      # enables STS for minio authentication
      MINIO_IDENTITY_PLUGIN_ROLE_POLICY: "userpolicy"
      MINIO_IDENTITY_PLUGIN_ROLE_ID: "abcd"
      # data directory inside minio is mapped to mnt/data folder, such that everything stored can be viewed there
    volumes:
      - ../../../../mnt/data:/data
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "curl",
    #       "-f",
    #       "http://localhost:9000/minio/health/live"
    #     ]
    #   interval: 30s
    #   timeout: 20s
    #   retries: 3
    #   hostname: minio1
    networks:
      - rabbitminio
      - policy

  # minio initialization steps. Uses the mc binary to
  # - create the user policy
  minioinit:
    image: minio/mc
    # container_name: minioinit
    depends_on:
      - minio1
    volumes:
      - ../minio/userpolicy.json:/userpolicy.json
    entrypoint: >
      /bin/sh -c "  /usr/bin/mc alias set photoflux http://minio1:9000 hello myfriend; /usr/bin/mc admin policy create photoflux userpolicy userpolicy.json;
       exit 0;"
    networks:
      - policy

networks:
  rabbitminio:
    driver: bridge

  # This network is used to initialize minio container configurations such as
  # user policy.
  policy:
